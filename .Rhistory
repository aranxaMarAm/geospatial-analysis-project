knitr::opts_chunk$set(echo = TRUE)
if (!require("spData", quietly = TRUE)) install.packages("spData")
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge")
library(sf) |> suppressMessages()
library(terra) |> suppressMessages()
library(dplyr) |> suppressMessages()
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
library(sf) |> suppressMessages()
library(dplyr) |> suppressMessages()
library(readr)
library(units) |> suppressMessages()
library(giscoR)
library(tmap)
library(ggplot2)
library(osmdata)
tmap_mode("view")
library("mapview")
library (terra)
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
library(sf) |> suppressMessages()
library(dplyr) |> suppressMessages()
library(readr)
library(units) |> suppressMessages()
library(giscoR)
library(tmap)
library(ggplot2)
library(osmdata)
tmap_mode("view")
library("mapview")
library (terra)
# Extract to current working directory
unzip("final_df.zip")
# Extract to current working directory
unzip("final_df.zip")
# Check extracted files
list.files()
wd()
getwd()
setwd("C:/Users/mmier/OneDrive - Hertie School/3. Estudio/2025 MDS/2025-1 Geospatial Analysis/geospatial-analysis-project")
getwd()
# Extract to current working directory
unzip("final_df.zip")
# Extract to current working directory
data <- unzip("final_df.zip")
data
# Define filenames
zip_filename <- "your_zip_file.zip"
csv_filename <- "final_df.csv"
# Extract the specific CSV file from the ZIP
unzip(zip_filename, files = csv_filename, exdir = tempdir())
# Read the CSV into a dataframe
final_df <- read.csv(file.path(tempdir(), csv_filename))
unzip("your_zip_file.zip", list = TRUE)
zip_filename <- "final_df.zip"
csv_filename <- "final_df.csv"
# Extract the specific CSV file from the ZIP
unzip(zip_filename, files = csv_filename, exdir = tempdir())
# Read the CSV into a dataframe
final_df <- read.csv(file.path(tempdir(), csv_filename))
unzip("final_df.zip", list = TRUE)
tempdir()
unzip("final_df.zip", list = TRUE)
x <- unzip("final_df.zip", list = TRUE)
View(x)
View(x)
unzip("final_df.zip", list = TRUE)
unzip(zip_filename, files = csv_filename, exdir = tempdir())
# Extract the specific CSV file from the ZIP
unzip(zip_filename, files = csv_filename)
# Temporary directory
temp_dir <- tempdir()
# Extract the specific CSV file to temp dir
unzip(zipfile = zip_filename, files = csv_filename, exdir = temp_dir)
# Check if extraction succeeded (optional, but recommended)
extracted_file_path <- file.path(temp_dir, csv_filename)
if (!file.exists(extracted_file_path)) {
stop("Extraction failed. Check filenames.")
}
unzip("final_df.zip", list = TRUE)
# Extract the specific CSV file to temp dir
unzip(zipfile = zip_filename, files = csv_filename, exdir = temp_dir)
# Temporary directory
temp_dir <- tempdir()
# Extract the specific CSV file to temp dir
unzip(zipfile = zip_filename, files = csv_filename, exdir = temp_dir)
zip_filename <- "final_df.zip"
csv_filename <- "final_df.csv"
unzip(zipfile = zip_filename, files = csv_filename, exdir = temp_dir)
unzip("final_df.zip", list = TRUE)
zip_filename <- "final_df.zip"
csv_filename <- "../final_df.csv"
# Temporary directory
temp_dir <- tempdir()
# Extract the specific CSV file to temp dir
unzip(zipfile = zip_filename, files = csv_filename, exdir = temp_dir)
# Extracted file will retain directory structure, verify exact path:
extracted_file_path <- file.path(temp_dir, csv_filename)
# Normalize path (since "../" could cause issues)
extracted_file_path <- normalizePath(extracted_file_path, mustWork = FALSE)
# Check if extraction succeeded:
if (!file.exists(extracted_file_path)) {
stop("Extraction failed. Check filenames and paths.")
}
# Read the CSV into a dataframe
final_df <- read.csv(extracted_file_path)
# Clean up by deleting the file
file.remove(extracted_file_path)
View(final_df)
View(final_df)
mun <- fromJSON("Colombia_departamentos_municipios_poblacion-topov2.json")
install.packages("jsonlite")
library(jsonlite)
library(jsonlite)
mun <- fromJSON("Colombia_departamentos_municipios_poblacion-topov2.json")
View(mun)
View(mun)
mun <- fromJSON("Colombia_departamentos_municipios_poblacion-topov2.json")
# Preview first few rows or elements
head(mun)
# Check structure
str(mun
install.packages(c("geojsonio", "ggplot2", "sf"))
install.packages(c("geojsonio", "ggplot2", "sf"))
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
install.packages("jsonlite")
install.packages(c("geojsonio", "ggplot2", "sf"))
library(geojsonio)
library(sf)
library(ggplot2)
mun <- fromJSON("Colombia_departamentos_municipios_poblacion-topov2.json")
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
install.packages("jsonlite")
install.packages(c("geojsonio", "ggplot2", "sf"))
library(geojsonio)
library(sf)
library(ggplot2)
ggplot(municipalities_sf) +
geom_sf(fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "mun")
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
install.packages("jsonlite")
install.packages(c("geojsonio", "ggplot2", "sf"))
library(geojsonio)
library(sf)
library(ggplot2)
ggplot(mun) +
geom_sf(fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "mun")
knitr::opts_chunk$set(echo = TRUE)
### Install packages for reading data and data manipulation
if (!require("dplyr", quietly = TRUE)|>suppressMessages()) install.packages("dplyr") #|> suppressMessages() prevents displaying unnecessary messages when loading the package.
if (!require("readr", quietly = TRUE)) install.packages("readr")
### Install packages for spatial data analysis
if (!require("sf", quietly = TRUE)) install.packages("sf") #sf= Single Features
if (!require("terra", quietly = TRUE)) install.packages("terra") #terra= Raster and Vector Spatial Data
if (!require("tmap")) install.packages("tmap") #tmap= Thematic Cartografy and visualization
if (!require("tmap", quietly = TRUE)) remotes::install_github('r-tmap/tmap') #ensures the latest development version is installed: If tmap is still missing after checking, it installs it from GitHub instead of CRAN.
if (!require("spDataLarge", quietly = TRUE)) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source") #spDataLarge= contains large spatial datasets.
if (!require("gisCOR", quietly = TRUE))
if (!require("units", quietly = TRUE))
### Install other packages
if (!require("remotes", quietly = TRUE)) install.packages("remotes") #remotes= GitHub Package Installer
if (!require("httr", quietly = TRUE)) install.packages("httr") #httr= http requests
if (!require("knitr", quietly = TRUE)) install.packages("knitr")
install.packages("jsonlite")
install.packages(c("geojsonio", "ggplot2", "sf"))
library(geojsonio)
library(sf)
library(ggplot2)
mun_sf <- topojson_read("Colombia_departamentos_municipios_poblacion-topov2.json", quiet = TRUE)
install.packages(c("geojsonio", "ggplot2", "sf"))
ggplot(mun_sf) +
geom_sf(fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "mun")
mun_sf <- topojson_read("Colombia_departamentos_municipios_poblacion-topov2.json", quiet = TRUE)
str(mun)
mun_sf <- topojson_read("Colombia_departamentos_municipios_poblacion-topov2.json", quiet = TRUE)
mun_sf <- geojson_sf("Colombia_departamentos_municipios_poblacion-topov2.json")
View(mun_sf)
View(mun_sf)
ggplot(mun_sf) +
geom_sf(fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Municipalities")
library(geojsonio)
library(sf)
# Convert TopoJSON to GeoJSON explicitly
geojson_data <- topojson_json("municipalities.json")
library(geojsonio)
library(sf)
# Convert TopoJSON to GeoJSON explicitly
geojson_data <- topojson_json("Colombia_departamentos_municipios_poblacion-topov2.json")
head(mun_sf)
# Assuming common key is "municipality_id"
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = "codmpio")
head(mun_sf)
# Assuming common key is "municipality_id"
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = "codmpio"="MPIO_CCDGO")
# Assuming common key is "municipality_id"
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = C("codmpio"="MPIO_CCDGO"))
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = c("codmpio"="MPIO_CCDGO"))
# Assuming common key is "municipality_id"
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = c("MPIO_CCDGO" = "codmpio"))
final_df <- final_df %>%
mutate(codmpio = as.character(codmpio))
# Assuming common key is "municipality_id"
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = c("MPIO_CCDGO" = "codmpio"))
final_df <- final_df %>%
mutate(codmpio = as.character(codmpio))
# Assuming common key is "municipality_id"
mun_sf_merged <- mun_sf %>%
left_join(final_df, by = c("MPIO_CCDGO" = "codmpio"))
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp)) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(
title = "Population by Municipality",
fill = "Population"
)
head(mun_sf_merged)
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(population = mean(population, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp = mean(gdp, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CCDGO" = "codmpio"))
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp = mean(gdp, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CCDGO" = "codmpio"))
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp)) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(
title = "Population by Municipality",
fill = "Population"
)
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp)) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(
title = "Population by Municipality",
fill = "Population"
)
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp = mean(gdp, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CCDGO" = "codmpio"))
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = population), color = "white", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "Population by Municipality (2022)", fill = "Population")
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp = mean(gdp, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CCDGO" = "codmpio"))
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp), color = "white", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "Population by Municipality (2022)", fill = "Population")
head(mun_sf_merged)
View(mun_sf)
View(mun_sf_merged)
View(mun_sf_merged)
View(final_df_avg)
View(final_df_avg)
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp = mean(gdp, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CCDGO" = "codmpio"))
head(mun_sf_merged)
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp = mean(gdp, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CDPMP" = "codmpio"))
head(mun_sf_merged)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp), color = "white", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "Population by Municipality (2022)", fill = "Population")
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "Population by Municipality (2022)", fill = "Population")
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp_pc = mean(gdp_PC, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
final_df_avg <- final_df %>%
group_by(codmpio) %>%
summarise(gdp_pc = mean(gdp_pc, na.rm = TRUE)) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CDPMP" = "codmpio"))
head(mun_sf_merged)
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp_pc), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "GDP by Municipality (2022)", fill = "Population")
final_df_2022 <- final_df %>%
filter(year == 2022) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CDPMP" = "codmpio"))
head(mun_sf_merged)
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp_pc), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "GDP by Municipality (2022)", fill = "Population")
final_df_2022 <- final_df %>%
filter(year == 2015) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CDPMP" = "codmpio"))
head(mun_sf_merged)
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp_pc), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "GDP by Municipality (2022)", fill = "Population")
final_df_2022 <- final_df %>%
filter(year == 2012) %>%
mutate(codmpio = stringr::str_pad(codmpio, 5, pad = "0"))
mun_sf_merged <- mun_sf %>%
left_join(final_df_avg, by = c("MPIO_CDPMP" = "codmpio"))
head(mun_sf_merged)
library(ggplot2)
ggplot(mun_sf_merged) +
geom_sf(aes(fill = gdp_pc), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_minimal() +
labs(title = "GDP by Municipality (2022)", fill = "Population")
knitr::opts_chunk$set(echo = TRUE)
areal_data <- read_sf("berlin_boroughs.geojson")
